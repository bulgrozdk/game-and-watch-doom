##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.10.0-B14] date: [Fri Nov 20 16:38:22 CET 2020] 
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = gw_doom


######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og


#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

######################################
# source
######################################
# C sources
C_SOURCES =  \
Core/Src/flash.c \
Core/Src/lcd.c \
Core/Src/buttons.c \
Core/Src/data.c \
Core/Src/ff.c \
Core/Src/main.c \
Core/Src/stm32h7xx_it.c \
Core/Src/stm32h7xx_hal_msp.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_cortex.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_ltdc.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_ltdc_ex.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rcc_ex.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_flash_ex.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_gpio.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_hsem.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_dma.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_dma_ex.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_mdma.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_pwr_ex.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_i2c.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_i2c_ex.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_exti.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_tim_ex.c \
Core/Src/system_stm32h7xx.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_spi.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_spi_ex.c \
Core/chocdoom/dummy.c \
Core/chocdoom/am_map.c \
Core/chocdoom/doomdef.c \
Core/chocdoom/doomstat.c \
Core/chocdoom/dstrings.c \
Core/chocdoom/d_event.c \
Core/chocdoom/d_items.c \
Core/chocdoom/d_iwad.c \
Core/chocdoom/d_loop.c \
Core/chocdoom/d_main.c \
Core/chocdoom/d_mode.c \
Core/chocdoom/d_net.c \
Core/chocdoom/f_finale.c \
Core/chocdoom/f_wipe.c \
Core/chocdoom/g_game.c \
Core/chocdoom/hu_lib.c \
Core/chocdoom/hu_stuff.c \
Core/chocdoom/info.c \
Core/chocdoom/i_cdmus.c \
Core/chocdoom/i_endoom.c \
Core/chocdoom/i_joystick.c \
Core/chocdoom/i_main.c \
Core/chocdoom/i_scale.c \
Core/chocdoom/i_sound.c \
Core/chocdoom/i_system.c \
Core/chocdoom/i_timer.c \
Core/chocdoom/i_video.c \
Core/chocdoom/memio.c \
Core/chocdoom/m_argv.c \
Core/chocdoom/m_bbox.c \
Core/chocdoom/m_cheat.c \
Core/chocdoom/m_config.c \
Core/chocdoom/m_controls.c \
Core/chocdoom/m_fixed.c \
Core/chocdoom/m_menu.c \
Core/chocdoom/m_misc.c \
Core/chocdoom/m_random.c \
Core/chocdoom/p_ceilng.c \
Core/chocdoom/p_doors.c \
Core/chocdoom/p_enemy.c \
Core/chocdoom/p_floor.c \
Core/chocdoom/p_inter.c \
Core/chocdoom/p_lights.c \
Core/chocdoom/p_map.c \
Core/chocdoom/p_maputl.c \
Core/chocdoom/p_mobj.c \
Core/chocdoom/p_plats.c \
Core/chocdoom/p_pspr.c \
Core/chocdoom/p_saveg.c \
Core/chocdoom/p_setup.c \
Core/chocdoom/p_sight.c \
Core/chocdoom/p_spec.c \
Core/chocdoom/p_switch.c \
Core/chocdoom/p_telept.c \
Core/chocdoom/p_tick.c \
Core/chocdoom/p_user.c \
Core/chocdoom/r_bsp.c \
Core/chocdoom/r_data.c \
Core/chocdoom/r_draw.c \
Core/chocdoom/r_main.c \
Core/chocdoom/r_plane.c \
Core/chocdoom/r_segs.c \
Core/chocdoom/r_sky.c \
Core/chocdoom/r_things.c \
Core/chocdoom/sha1.c \
Core/chocdoom/sounds.c \
Core/chocdoom/statdump.c \
Core/chocdoom/st_lib.c \
Core/chocdoom/st_stuff.c \
Core/chocdoom/s_sound.c \
Core/chocdoom/tables.c \
Core/chocdoom/v_video.c \
Core/chocdoom/wi_stuff.c \
Core/chocdoom/w_checksum.c \
Core/chocdoom/w_file.c \
Core/chocdoom/w_file_stdc.c \
Core/chocdoom/w_main.c \
Core/chocdoom/w_wad.c \
Core/chocdoom/z_zone.c \
Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_ospi.c

# ASM sources
ASM_SOURCES =  \
startup_stm32h7b0xx.s


#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m7

# fpu
FPU = -mfpu=fpv5-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
-DUSE_HAL_DRIVER \
-DSTM32H7B0xx


# AS includes
AS_INCLUDES = 

# C includes
C_INCLUDES =  \
-ICore/chocdoom \
-ICore/Inc \
-IDrivers/STM32H7xx_HAL_Driver/Inc \
-IDrivers/STM32H7xx_HAL_Driver/Inc/Legacy \
-IDrivers/CMSIS/Device/ST/STM32H7xx/Include \
-IDrivers/CMSIS/Include


# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2 -O0
endif


# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"


#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = STM32H7B0VBTx_FLASH.ld

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET)_extflash.bin $(BUILD_DIR)/$(TARGET)_intflash.bin


#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))
# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR) 
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/$(TARGET)_extflash.bin: $(BUILD_DIR)/$(TARGET).elf | $(BUILD_DIR)
	$(V)$(BIN)  -j .spiflash $< $(BUILD_DIR)/$(TARGET)_extflash.bin

$(BUILD_DIR)/$(TARGET)_intflash.bin: $(BUILD_DIR)/$(TARGET).elf | $(BUILD_DIR)
	$(V)$(BIN) -j .isr_vector -j .text -j .rodata -j .ARM.extab -j .preinit_array -j .init_array -j .fini_array -j .data $< $(BUILD_DIR)/$(TARGET)_intflash.bin
	
$(BUILD_DIR):
	mkdir $@		


#######################################
# clean up
#######################################
clean:
	-rm -fR $(BUILD_DIR)
  
#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***
